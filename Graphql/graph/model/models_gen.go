// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"Graphql/app/mysql"
	"strconv"
	"strings"
)

type Article struct {
	ID          string     `json:"id"`
	Text        string     `json:"text"`
	IsPublished bool       `json:"isPublished"`
	Author      *User      `json:"author"`
	Comments    []*Comment `json:"comments"`
}

type Comment struct {
	ID     string `json:"id"`
	Desc   string `json:"desc"`
	Author *User  `json:"desc"`
}

type NewArticle struct {
	Text     string `json:"text"`
	AuthorID string `json:"authorId"`
}

type NewComment struct {
	Desc     string `json:"desc"`
	AuthorID string `json:"authorId"`
}

type NewUser struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Sex   string `json:"sex"`
}

type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"Email"`
	Sex   string `json:"Sex"`
}

func GetArticle(id int) (article *Article) {
	article = new(Article)
	dao := mysql.CreateArticleDao()
	article_mysql := dao.Article(id)
	article.ID = strconv.Itoa(article_mysql.Id)
	article.Text = article.Text
	article.Author = GetUser(article_mysql.Author)
	for _, s := range strings.Split(article_mysql.Comments, ",") {
		id, _ := strconv.Atoi(s)
		article.Comments = append(article.Comments, GetComment(id))
	}
	return
}
func GetArticles() (articles []*Article) {
	dao := mysql.CreateArticleDao()
	article_mysql := dao.Articles()
	articles = make([]*Article, 0)
	for _, at := range article_mysql {
		article := new(Article)
		article.ID = strconv.Itoa(at.Id)
		article.Text = at.Text
		article.Author = GetUser(at.Author)
		for _, s := range strings.Split(at.Comments, ",") {
			id, _ := strconv.Atoi(s)
			article.Comments = append(article.Comments, GetComment(id))
		}
		articles = append(articles, article)
	}
	return
}
func GetUser(id int) (user *User) {
	user = new(User)
	dao := mysql.CreateUserDao()
	user_mysql := dao.User(id)
	user.ID = strconv.Itoa(user_mysql.Id)
	user.Name = user_mysql.Name
	user.Email = user_mysql.Email
	if user_mysql.Sex == 1 {
		user.Sex = "man"
	} else {
		user.Sex = "woman"
	}
	return
}
func GetComment(id int) (comment *Comment) {
	comment = new(Comment)
	dao := mysql.CreateCommentDao()
	com_mysql := dao.Comment(id)
	comment.ID = strconv.Itoa(com_mysql.Id)
	comment.Desc = com_mysql.Desc
	comment.Author = GetUser(com_mysql.Author)
	return
}
